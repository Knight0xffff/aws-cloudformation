AWSTemplateFormatVersion: '2010-09-09'
Description: 'Deploy StarRocks-BE on Amazon Web Services'
Metadata:
  LICENSE: Apache License Version 2.0
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Network configuration
      Parameters:
      - PrivateSubnetID
      - StarRocksServerSecurityGroup
    - Label:
        default: EC2 configuration
      Parameters:
      - KeyPairName
    - Label:
        default: AMI's id
      Parameters:
      - AmiId
    - Label:
        default: Node type configuration
      Parameters:
      - BeNodeInstanceType
      - BeNodeCount
    - Label:
        default: BE configuration
      Parameters:
      - SysLogDir
      - SysLogLevel
      - BePort
      - WebserverPort
      - HeartbeatServicePort
      - BrpcPort
      - VolumeType
      - VolumeSize
      - Iops
    ParameterLabels:
      PrivateSubnetID:
        default: Private subnet ID
      StarRocksServerSecurityGroup:
        default: StarRocks Server Security Group
      KeyPairName:
        default: Key pair name
      AmiId:
        default: AMI with StarRocks
      BeNodeInstanceType:
        default: Be instance type
      BeNodeCount:
        default: Be node count
      SysLogDir:
        default: Dir to save be sys log
      SysLogLevel:
        default: Sys Log Level
      BePort:
        default: Be port
      WebserverPort:
        default: Webserver port
      HeartbeatServicePort:
        default: Heartbeat service port
      BrpcPort:
        default: Brpc port
      VolumeType:
        default: Volume type of Be nodes
      VolumeSize:
        default: Volume size of Be nodes
      Iops:
        default: IOPS of Be nodes
Parameters: 
  PrivateSubnetID: 
    Description: The Private Subnet ID that you want to deploy Fe nodes.
    Type: String
  StarRocksServerSecurityGroup: 
    Description: StarRocks Server Security Group.
    Type: String
  KeyPairName: 
    Type: AWS::EC2::KeyPair::KeyName
    Description: Public/private key pairs allow you to securely connect to your instance after it launches.
  AmiId:
    Description: Reference the latest Amazon Linux AMI in a CloudFormation template.
    Type: String
  BeNodeInstanceType: 
    Description: Amazon EC2 instance type for the be nodes.
    Type: String
    AllowedValues: 
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.8xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
  BeNodeCount:
    Type: Number
    Description: Number of StarRocks Be
    AllowedValues: 
      - 3
      - 4
      - 5
      - 6
  SysLogDir:
    Description: Dir to save be log, please to fill in the absolute path
    Type: String
  SysLogLevel:
    Description: Sys Log Level, please select from the drop-down menu
    Type: String
    AllowedValues: 
      - INFO
      - WARN
      - ERROR
      - FATAL
  BePort:
    Description: Be port
    Type: String
  WebserverPort:
    Description: Webserver port
    Type: String
  HeartbeatServicePort:
    Description: Heartbeat service port
    Type: String
  BrpcPort:
    Description: Brpc port
    Type: String
  VolumeType: 
    Type: String
    Description: EBS volume type (data) to be attached to node in GBs [gp2,gp3,st1], one volume for data storage is mounted automatically by CloudFormation stack.
    Default: gp2
    AllowedValues:
      - gp2
      - gp3
      - st1
      - io1
  VolumeSize: 
    Type: String
    Description: EBS volume size (data) to be attached to node in GBs.
    Default: 50
  Iops: 
    Type: String
    Description: IOPS of EBS volume when io1 type is chosen. Otherwise ignored.
    Default: 1000
Conditions:
  UseIops: 
    Fn::Equals: [!Ref VolumeType,"io1"]
  3NodesCondition: !Or 
    - !Equals [!Ref 'BeNodeCount', '3']
    - !Equals [!Ref 'BeNodeCount', '4']
    - !Equals [!Ref 'BeNodeCount', '5']
    - !Equals [!Ref 'BeNodeCount', '6']
  4NodesCondition: !Or  
    - !Equals [!Ref 'BeNodeCount', '4']
    - !Equals [!Ref 'BeNodeCount', '5']
    - !Equals [!Ref 'BeNodeCount', '6']
  5NodesCondition: !Or 
    - !Equals [!Ref 'BeNodeCount', '5'] 
    - !Equals [!Ref 'BeNodeCount', '6']
  6NodesCondition: !Equals [!Ref 'BeNodeCount', '6']
Resources:
  BeInstance1:
    Condition: 3NodesCondition
    Type: AWS::EC2::Instance
    Metadata:
      Comment: Install be instance replica 1
    Properties:
      KeyName: !Ref KeyPairName
      ImageId: !Ref AmiId
      InstanceType: !Ref BeNodeInstanceType
      SubnetId: !Ref PrivateSubnetID
      SecurityGroupIds:
      - !Ref StarRocksServerSecurityGroup
      BlockDeviceMappings:
      - DeviceName: /dev/xvdh
        Ebs:
          VolumeSize: !Ref VolumeSize
          VolumeType: !Ref VolumeType
          Iops: !If [UseIops,!Ref Iops,!Ref AWS::NoValue]
          DeleteOnTermination: true
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init -v --stack '${AWS::StackName}' --resource BeInstance1 --region ${AWS::Region}
          sudo mkfs.xfs /dev/xvdh
          sudo mkdir -p /home/data
          sudo mount /dev/xvdh /home/data
          cd /home/ec2-user/starrocks/StarRocks-2.0.1/be
          echo "storage_root_path = /home/data" >> conf/be.conf
          bin/start_be.sh --daemon
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource BeInstance1 --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: "PT10M"
  BeInstance2:
    Condition: 3NodesCondition
    Type: AWS::EC2::Instance
    Metadata:
      Comment: Install be instance replica 2
    Properties:
      KeyName: !Ref KeyPairName
      ImageId: !Ref AmiId
      InstanceType: !Ref BeNodeInstanceType
      SubnetId: !Ref PrivateSubnetID
      SecurityGroupIds:
      - !Ref StarRocksServerSecurityGroup
      BlockDeviceMappings:
      - DeviceName: /dev/xvdh
        Ebs:
          VolumeSize: !Ref VolumeSize
          VolumeType: !Ref VolumeType
          Iops: !If [UseIops,!Ref Iops,!Ref AWS::NoValue]
          DeleteOnTermination: true
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init -v --stack '${AWS::StackName}' --resource BeInstance2 --region ${AWS::Region}
          sudo mkfs.xfs /dev/xvdh
          sudo mkdir -p /home/data
          sudo mount /dev/xvdh /home/data
          cd /home/ec2-user/starrocks/StarRocks-2.0.1/be
          echo "storage_root_path = /home/data" >> conf/be.conf
          bin/start_be.sh --daemon
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource BeInstance2 --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: "PT10M"
  BeInstance3:
    Condition: 3NodesCondition
    Type: AWS::EC2::Instance
    Metadata:
      Comment: Install be instance replica 3
    Properties:
      KeyName: !Ref KeyPairName
      ImageId: !Ref AmiId
      InstanceType: !Ref BeNodeInstanceType
      SubnetId: !Ref PrivateSubnetID
      SecurityGroupIds:
      - !Ref StarRocksServerSecurityGroup
      BlockDeviceMappings:
      - DeviceName: /dev/xvdh
        Ebs:
          VolumeSize: !Ref VolumeSize
          VolumeType: !Ref VolumeType
          Iops: !If [UseIops,!Ref Iops,!Ref AWS::NoValue]
          DeleteOnTermination: true
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init -v --stack '${AWS::StackName}' --resource BeInstance3 --region ${AWS::Region}
          sudo mkfs.xfs /dev/xvdh
          sudo mkdir -p /home/data
          sudo mount /dev/xvdh /home/data
          cd /home/ec2-user/starrocks/StarRocks-2.0.1/be
          echo "storage_root_path = /home/data" >> conf/be.conf
          bin/start_be.sh --daemon
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource BeInstance3 --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: "PT10M"
  BeInstance4:
    Condition: 4NodesCondition
    Type: AWS::EC2::Instance
    Metadata:
      Comment: Install be instance replica 4
    Properties:
      KeyName: !Ref KeyPairName
      ImageId: !Ref AmiId
      InstanceType: !Ref BeNodeInstanceType
      SubnetId: !Ref PrivateSubnetID
      SecurityGroupIds:
      - !Ref StarRocksServerSecurityGroup
      BlockDeviceMappings:
      - DeviceName: /dev/xvdh
        Ebs:
          VolumeSize: !Ref VolumeSize
          VolumeType: !Ref VolumeType
          Iops: !If [UseIops,!Ref Iops,!Ref AWS::NoValue]
          DeleteOnTermination: true
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init -v --stack '${AWS::StackName}' --resource BeInstance4 --region ${AWS::Region}
          sudo mkfs.xfs /dev/xvdh
          sudo mkdir -p /home/data
          sudo mount /dev/xvdh /home/data
          cd /home/ec2-user/starrocks/StarRocks-2.0.1/be
          echo "storage_root_path = /home/data" >> conf/be.conf
          bin/start_be.sh --daemon
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource BeInstance4 --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: "PT10M"
  BeInstance5:
    Condition: 5NodesCondition
    Type: AWS::EC2::Instance
    Metadata:
      Comment: Install be instance replica 5
    Properties:
      KeyName: !Ref KeyPairName
      ImageId: !Ref AmiId
      InstanceType: !Ref BeNodeInstanceType
      SubnetId: !Ref PrivateSubnetID
      SecurityGroupIds:
      - !Ref StarRocksServerSecurityGroup
      BlockDeviceMappings:
      - DeviceName: /dev/xvdh
        Ebs:
          VolumeSize: !Ref VolumeSize
          VolumeType: !Ref VolumeType
          Iops: !If [UseIops,!Ref Iops,!Ref AWS::NoValue]
          DeleteOnTermination: true
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init -v --stack '${AWS::StackName}' --resource BeInstance5 --region ${AWS::Region}
          sudo mkfs.xfs /dev/xvdh
          sudo mkdir -p /home/data
          sudo mount /dev/xvdh /home/data
          cd /home/ec2-user/starrocks/StarRocks-2.0.1/be
          echo "storage_root_path = /home/data" >> conf/be.conf
          bin/start_be.sh --daemon
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource BeInstance5 --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: "PT10M"
  BeInstance6:
    Condition: 6NodesCondition
    Type: AWS::EC2::Instance
    Metadata:
      Comment: Install be instance replica 6
    Properties:
      KeyName: !Ref KeyPairName
      ImageId: !Ref AmiId
      InstanceType: !Ref BeNodeInstanceType
      SubnetId: !Ref PrivateSubnetID
      SecurityGroupIds:
      - !Ref StarRocksServerSecurityGroup
      BlockDeviceMappings:
      - DeviceName: /dev/xvdh
        Ebs:
          VolumeSize: !Ref VolumeSize
          VolumeType: !Ref VolumeType
          Iops: !If [UseIops,!Ref Iops,!Ref AWS::NoValue]
          DeleteOnTermination: true
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash -xe
          /opt/aws/bin/cfn-init -v --stack '${AWS::StackName}' --resource BeInstance6 --region ${AWS::Region}
          sudo mkfs.xfs /dev/xvdh
          sudo mkdir -p /home/data
          sudo mount /dev/xvdh /home/data
          cd /home/ec2-user/starrocks/StarRocks-2.0.1/be
          echo "storage_root_path = /home/data" >> conf/be.conf
          bin/start_be.sh --daemon
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource BeInstance6 --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: "PT10M"
Outputs:
  BeInstance1:
    Condition: 3NodesCondition
    Description: be instance 1
    Value: !Ref BeInstance1
  BeInstancePrivateIp1:
    Condition: 3NodesCondition
    Value: !GetAtt BeInstance1.PrivateIp
  BeInstance2:
    Condition: 3NodesCondition
    Description: be instance 2
    Value: !Ref BeInstance2
  BeInstancePrivateIp2:
    Condition: 3NodesCondition
    Value: !GetAtt BeInstance2.PrivateIp
  BeInstance3:
    Condition: 3NodesCondition
    Description: be instance 3
    Value: !Ref BeInstance3
  BeInstancePrivateIp3:
    Condition: 3NodesCondition
    Value: !GetAtt BeInstance3.PrivateIp
  BeInstance4:
    Condition: 4NodesCondition
    Description: be instance 4
    Value: !Ref BeInstance4
  BeInstancePrivateIp4:
    Condition: 4NodesCondition
    Value: !GetAtt BeInstance4.PrivateIp
  BeInstance5:
    Condition: 5NodesCondition
    Description: be instance 5
    Value: !Ref BeInstance5
  BeInstancePrivateIp5:
    Condition: 5NodesCondition
    Value: !GetAtt BeInstance5.PrivateIp
  BeInstance6:
    Condition: 6NodesCondition
    Description: be instance 6
    Value: !Ref BeInstance6
  BeInstancePrivateIp6:
    Condition: 6NodesCondition
    Value: !GetAtt BeInstance6.PrivateIp